// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parsers

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
	"golang.org/x/text/encoding/unicode"
)


/**
 * Windows MiniDump (MDMP) file provides a concise way to store process
 * core dumps, which is useful for debugging. Given its small size,
 * modularity, some cross-platform features and native support in some
 * debuggers, it is particularly useful for crash reporting, and is
 * used for that purpose in Windows and Google Chrome projects.
 * 
 * The file itself is a container, which contains a number of typed
 * "streams", which contain some data according to its type attribute.
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_header">Source</a>
 */

type WindowsMinidump_StreamTypes int
const (
	WindowsMinidump_StreamTypes__Unused WindowsMinidump_StreamTypes = 0
	WindowsMinidump_StreamTypes__Reserved0 WindowsMinidump_StreamTypes = 1
	WindowsMinidump_StreamTypes__Reserved1 WindowsMinidump_StreamTypes = 2
	WindowsMinidump_StreamTypes__ThreadList WindowsMinidump_StreamTypes = 3
	WindowsMinidump_StreamTypes__ModuleList WindowsMinidump_StreamTypes = 4
	WindowsMinidump_StreamTypes__MemoryList WindowsMinidump_StreamTypes = 5
	WindowsMinidump_StreamTypes__Exception WindowsMinidump_StreamTypes = 6
	WindowsMinidump_StreamTypes__SystemInfo WindowsMinidump_StreamTypes = 7
	WindowsMinidump_StreamTypes__ThreadExList WindowsMinidump_StreamTypes = 8
	WindowsMinidump_StreamTypes__Memory64List WindowsMinidump_StreamTypes = 9
	WindowsMinidump_StreamTypes__CommentA WindowsMinidump_StreamTypes = 10
	WindowsMinidump_StreamTypes__CommentW WindowsMinidump_StreamTypes = 11
	WindowsMinidump_StreamTypes__HandleData WindowsMinidump_StreamTypes = 12
	WindowsMinidump_StreamTypes__FunctionTable WindowsMinidump_StreamTypes = 13
	WindowsMinidump_StreamTypes__UnloadedModuleList WindowsMinidump_StreamTypes = 14
	WindowsMinidump_StreamTypes__MiscInfo WindowsMinidump_StreamTypes = 15
	WindowsMinidump_StreamTypes__MemoryInfoList WindowsMinidump_StreamTypes = 16
	WindowsMinidump_StreamTypes__ThreadInfoList WindowsMinidump_StreamTypes = 17
	WindowsMinidump_StreamTypes__HandleOperationList WindowsMinidump_StreamTypes = 18
	WindowsMinidump_StreamTypes__Token WindowsMinidump_StreamTypes = 19
	WindowsMinidump_StreamTypes__JavaScriptData WindowsMinidump_StreamTypes = 20
	WindowsMinidump_StreamTypes__SystemMemoryInfo WindowsMinidump_StreamTypes = 21
	WindowsMinidump_StreamTypes__ProcessVmCounters WindowsMinidump_StreamTypes = 22
	WindowsMinidump_StreamTypes__IptTrace WindowsMinidump_StreamTypes = 23
	WindowsMinidump_StreamTypes__ThreadNames WindowsMinidump_StreamTypes = 24
	WindowsMinidump_StreamTypes__CeNull WindowsMinidump_StreamTypes = 32768
	WindowsMinidump_StreamTypes__CeSystemInfo WindowsMinidump_StreamTypes = 32769
	WindowsMinidump_StreamTypes__CeException WindowsMinidump_StreamTypes = 32770
	WindowsMinidump_StreamTypes__CeModuleList WindowsMinidump_StreamTypes = 32771
	WindowsMinidump_StreamTypes__CeProcessList WindowsMinidump_StreamTypes = 32772
	WindowsMinidump_StreamTypes__CeThreadList WindowsMinidump_StreamTypes = 32773
	WindowsMinidump_StreamTypes__CeThreadContextList WindowsMinidump_StreamTypes = 32774
	WindowsMinidump_StreamTypes__CeThreadCallStackList WindowsMinidump_StreamTypes = 32775
	WindowsMinidump_StreamTypes__CeMemoryVirtualList WindowsMinidump_StreamTypes = 32776
	WindowsMinidump_StreamTypes__CeMemoryPhysicalList WindowsMinidump_StreamTypes = 32777
	WindowsMinidump_StreamTypes__CeBucketParameters WindowsMinidump_StreamTypes = 32778
	WindowsMinidump_StreamTypes__CeProcessModuleMap WindowsMinidump_StreamTypes = 32779
	WindowsMinidump_StreamTypes__CeDiagnosisList WindowsMinidump_StreamTypes = 32780
	WindowsMinidump_StreamTypes__MdCrashpadInfoStream WindowsMinidump_StreamTypes = 1129316353
	WindowsMinidump_StreamTypes__MdRawBreakpadInfo WindowsMinidump_StreamTypes = 1197932545
	WindowsMinidump_StreamTypes__MdRawAssertionInfo WindowsMinidump_StreamTypes = 1197932546
	WindowsMinidump_StreamTypes__MdLinuxCpuInfo WindowsMinidump_StreamTypes = 1197932547
	WindowsMinidump_StreamTypes__MdLinuxProcStatus WindowsMinidump_StreamTypes = 1197932548
	WindowsMinidump_StreamTypes__MdLinuxLsbRelease WindowsMinidump_StreamTypes = 1197932549
	WindowsMinidump_StreamTypes__MdLinuxCmdLine WindowsMinidump_StreamTypes = 1197932550
	WindowsMinidump_StreamTypes__MdLinuxEnviron WindowsMinidump_StreamTypes = 1197932551
	WindowsMinidump_StreamTypes__MdLinuxAuxv WindowsMinidump_StreamTypes = 1197932552
	WindowsMinidump_StreamTypes__MdLinuxMaps WindowsMinidump_StreamTypes = 1197932553
	WindowsMinidump_StreamTypes__MdLinuxDsoDebug WindowsMinidump_StreamTypes = 1197932554
)
type WindowsMinidump struct {
	Magic1 []byte
	Magic2 []byte
	Version uint16
	NumStreams uint32
	OfsStreams uint32
	Checksum uint32
	Timestamp uint32
	Flags uint64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent interface{}
	_f_streams bool
	streams []*WindowsMinidump_Dir
}
func NewWindowsMinidump() *WindowsMinidump {
	return &WindowsMinidump{
	}
}

func (this *WindowsMinidump) Read(io *kaitai.Stream, parent interface{}, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic1 = tmp1
	if !(bytes.Equal(this.Magic1, []uint8{77, 68, 77, 80})) {
		return kaitai.NewValidationNotEqualError([]uint8{77, 68, 77, 80}, this.Magic1, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Magic2 = tmp2
	if !(bytes.Equal(this.Magic2, []uint8{147, 167})) {
		return kaitai.NewValidationNotEqualError([]uint8{147, 167}, this.Magic2, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Version = uint16(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumStreams = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsStreams = uint32(tmp5)
	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Checksum = uint32(tmp6)
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Timestamp = uint32(tmp7)
	tmp8, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Flags = uint64(tmp8)
	return err
}
func (this *WindowsMinidump) Streams() (v []*WindowsMinidump_Dir, err error) {
	if (this._f_streams) {
		return this.streams, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsStreams), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumStreams); i++ {
		_ = i
		tmp9 := NewWindowsMinidump_Dir()
		err = tmp9.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.streams = append(this.streams, tmp9)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_streams = true
	this._f_streams = true
	return this.streams, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_module">Source</a>
 */
type WindowsMinidump_Module struct {
	BaseOfImage uint64
	SizeOfImage uint32
	CheckSum uint32
	TimeDateStamp uint32
	ModuleNameRva uint32
	VersionInfo *WindowsMinidump_VsFiledfileinfo
	CvRecord *WindowsMinidump_LocationDescriptor
	MiscRecord *WindowsMinidump_LocationDescriptor
	Reserved0 uint64
	Reserved1 uint64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_ModuleList
	_f_lenModuleName bool
	lenModuleName uint32
	_f_moduleName bool
	moduleName string
}
func NewWindowsMinidump_Module() *WindowsMinidump_Module {
	return &WindowsMinidump_Module{
	}
}

func (this *WindowsMinidump_Module) Read(io *kaitai.Stream, parent *WindowsMinidump_ModuleList, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BaseOfImage = uint64(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SizeOfImage = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CheckSum = uint32(tmp12)
	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TimeDateStamp = uint32(tmp13)
	tmp14, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ModuleNameRva = uint32(tmp14)
	tmp15 := NewWindowsMinidump_VsFiledfileinfo()
	err = tmp15.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VersionInfo = tmp15
	tmp16 := NewWindowsMinidump_LocationDescriptor()
	err = tmp16.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.CvRecord = tmp16
	tmp17 := NewWindowsMinidump_LocationDescriptor()
	err = tmp17.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.MiscRecord = tmp17
	tmp18, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Reserved0 = uint64(tmp18)
	tmp19, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Reserved1 = uint64(tmp19)
	return err
}
func (this *WindowsMinidump_Module) LenModuleName() (v uint32, err error) {
	if (this._f_lenModuleName) {
		return this.lenModuleName, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(this.ModuleNameRva), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp20, err := thisIo.ReadU4le()
	if err != nil {
		return 0, err
	}
	this.lenModuleName = tmp20
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	this._f_lenModuleName = true
	this._f_lenModuleName = true
	return this.lenModuleName, nil
}
func (this *WindowsMinidump_Module) ModuleName() (v string, err error) {
	if (this._f_moduleName) {
		return this.moduleName, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64((this.ModuleNameRva + 4)), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp21, err := this.LenModuleName()
	if err != nil {
		return "", err
	}
	tmp22, err := thisIo.ReadBytes(int(tmp21))
	if err != nil {
		return "", err
	}
	tmp22 = tmp22
	tmp23, err := kaitai.BytesToStr(tmp22, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return "", err
	}
	this.moduleName = tmp23
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	this._f_moduleName = true
	this._f_moduleName = true
	return this.moduleName, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_module">Source</a>
 */
type WindowsMinidump_ModuleList struct {
	NumModules uint32
	Modules []*WindowsMinidump_Module
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_ModuleList() *WindowsMinidump_ModuleList {
	return &WindowsMinidump_ModuleList{
	}
}

func (this *WindowsMinidump_ModuleList) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp24, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumModules = uint32(tmp24)
	for i := 0; i < int(this.NumModules); i++ {
		_ = i
		tmp25 := NewWindowsMinidump_Module()
		err = tmp25.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Modules = append(this.Modules, tmp25)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_unloaded_module_list">Source</a>
 */
type WindowsMinidump_UnloadedModuleList struct {
	LenOfHeader uint32
	LenOfEntry uint32
	NumUnloadedModules uint32
	UnloadedModules []*WindowsMinidump_UnloadedModule
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_UnloadedModuleList() *WindowsMinidump_UnloadedModuleList {
	return &WindowsMinidump_UnloadedModuleList{
	}
}

func (this *WindowsMinidump_UnloadedModuleList) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp26, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenOfHeader = uint32(tmp26)
	tmp27, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenOfEntry = uint32(tmp27)
	tmp28, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumUnloadedModules = uint32(tmp28)
	for i := 0; i < int(this.NumUnloadedModules); i++ {
		_ = i
		tmp29 := NewWindowsMinidump_UnloadedModule()
		err = tmp29.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.UnloadedModules = append(this.UnloadedModules, tmp29)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_thread_list">Source</a>
 */
type WindowsMinidump_ThreadList struct {
	NumThreads uint32
	Threads []*WindowsMinidump_Thread
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_ThreadList() *WindowsMinidump_ThreadList {
	return &WindowsMinidump_ThreadList{
	}
}

func (this *WindowsMinidump_ThreadList) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp30, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumThreads = uint32(tmp30)
	for i := 0; i < int(this.NumThreads); i++ {
		_ = i
		tmp31 := NewWindowsMinidump_Thread()
		err = tmp31.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Threads = append(this.Threads, tmp31)
	}
	return err
}

/**
 * @see <a href="https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_memory_info">Source</a>
 */
type WindowsMinidump_MemoryInfo struct {
	BaseAddress uint64
	AllocationBase uint64
	AllocationProtect uint32
	Alignment1 uint32
	RegionSize uint64
	State uint32
	Protect uint32
	Type uint32
	Alignment2 uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_MemoryInfoList
}
func NewWindowsMinidump_MemoryInfo() *WindowsMinidump_MemoryInfo {
	return &WindowsMinidump_MemoryInfo{
	}
}

func (this *WindowsMinidump_MemoryInfo) Read(io *kaitai.Stream, parent *WindowsMinidump_MemoryInfoList, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp32, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BaseAddress = uint64(tmp32)
	tmp33, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.AllocationBase = uint64(tmp33)
	tmp34, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AllocationProtect = uint32(tmp34)
	tmp35, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Alignment1 = uint32(tmp35)
	tmp36, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.RegionSize = uint64(tmp36)
	tmp37, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.State = uint32(tmp37)
	tmp38, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Protect = uint32(tmp38)
	tmp39, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Type = uint32(tmp39)
	tmp40, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Alignment2 = uint32(tmp40)
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_memory_info_list?redirectedfrom=MSDN">Source</a>
 */
type WindowsMinidump_MemoryInfoList struct {
	SizeOfHeader uint32
	SizeOfEntry uint32
	NumEntries uint64
	Entries []*WindowsMinidump_MemoryInfo
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_MemoryInfoList() *WindowsMinidump_MemoryInfoList {
	return &WindowsMinidump_MemoryInfoList{
	}
}

func (this *WindowsMinidump_MemoryInfoList) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp41, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SizeOfHeader = uint32(tmp41)
	tmp42, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SizeOfEntry = uint32(tmp42)
	tmp43, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.NumEntries = uint64(tmp43)
	for i := 0; i < int(this.NumEntries); i++ {
		_ = i
		tmp44 := NewWindowsMinidump_MemoryInfo()
		err = tmp44.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp44)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_location_descriptor">Source</a>
 */
type WindowsMinidump_LocationDescriptor struct {
	LenData uint32
	OfsData uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent interface{}
	_f_data bool
	data []byte
}
func NewWindowsMinidump_LocationDescriptor() *WindowsMinidump_LocationDescriptor {
	return &WindowsMinidump_LocationDescriptor{
	}
}

func (this *WindowsMinidump_LocationDescriptor) Read(io *kaitai.Stream, parent interface{}, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp45, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenData = uint32(tmp45)
	tmp46, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsData = uint32(tmp46)
	return err
}
func (this *WindowsMinidump_LocationDescriptor) Data() (v []byte, err error) {
	if (this._f_data) {
		return this.data, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(this.OfsData), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp47, err := thisIo.ReadBytes(int(this.LenData))
	if err != nil {
		return nil, err
	}
	tmp47 = tmp47
	this.data = tmp47
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_data = true
	this._f_data = true
	return this.data, nil
}

/**
 * Specific string serialization scheme used in MiniDump format is
 * actually a simple 32-bit length-prefixed UTF-16 string.
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_string">Source</a>
 */
type WindowsMinidump_MinidumpString struct {
	LenStr uint32
	Str string
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent interface{}
}
func NewWindowsMinidump_MinidumpString() *WindowsMinidump_MinidumpString {
	return &WindowsMinidump_MinidumpString{
	}
}

func (this *WindowsMinidump_MinidumpString) Read(io *kaitai.Stream, parent interface{}, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp48, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenStr = uint32(tmp48)
	tmp49, err := this._io.ReadBytes(int(this.LenStr))
	if err != nil {
		return err
	}
	tmp49 = tmp49
	tmp50, err := kaitai.BytesToStr(tmp49, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.Str = tmp50
	return err
}

/**
 * "System info" stream provides basic information about the
 * hardware and operating system which produces this dump.
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_system_info">Source</a>
 */

type WindowsMinidump_SystemInfo_CpuArchs int
const (
	WindowsMinidump_SystemInfo_CpuArchs__Intel WindowsMinidump_SystemInfo_CpuArchs = 0
	WindowsMinidump_SystemInfo_CpuArchs__Arm WindowsMinidump_SystemInfo_CpuArchs = 5
	WindowsMinidump_SystemInfo_CpuArchs__Ia64 WindowsMinidump_SystemInfo_CpuArchs = 6
	WindowsMinidump_SystemInfo_CpuArchs__Amd64 WindowsMinidump_SystemInfo_CpuArchs = 9
	WindowsMinidump_SystemInfo_CpuArchs__Unknown WindowsMinidump_SystemInfo_CpuArchs = 65535
)
type WindowsMinidump_SystemInfo struct {
	CpuArch WindowsMinidump_SystemInfo_CpuArchs
	CpuLevel uint16
	CpuRevision uint16
	NumCpus uint8
	OsType uint8
	OsVerMajor uint32
	OsVerMinor uint32
	OsBuild uint32
	OsPlatform uint32
	OfsServicePack uint32
	OsSuiteMask uint16
	Reserved2 uint16
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
	_f_servicePack bool
	servicePack *WindowsMinidump_MinidumpString
}
func NewWindowsMinidump_SystemInfo() *WindowsMinidump_SystemInfo {
	return &WindowsMinidump_SystemInfo{
	}
}

func (this *WindowsMinidump_SystemInfo) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp51, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CpuArch = WindowsMinidump_SystemInfo_CpuArchs(tmp51)
	tmp52, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CpuLevel = uint16(tmp52)
	tmp53, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CpuRevision = uint16(tmp53)
	tmp54, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumCpus = tmp54
	tmp55, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OsType = tmp55
	tmp56, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OsVerMajor = uint32(tmp56)
	tmp57, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OsVerMinor = uint32(tmp57)
	tmp58, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OsBuild = uint32(tmp58)
	tmp59, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OsPlatform = uint32(tmp59)
	tmp60, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsServicePack = uint32(tmp60)
	tmp61, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.OsSuiteMask = uint16(tmp61)
	tmp62, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Reserved2 = uint16(tmp62)
	return err
}
func (this *WindowsMinidump_SystemInfo) ServicePack() (v *WindowsMinidump_MinidumpString, err error) {
	if (this._f_servicePack) {
		return this.servicePack, nil
	}
	if (this.OfsServicePack > 0) {
		thisIo := this._root._io
		_pos, err := thisIo.Pos()
		if err != nil {
			return nil, err
		}
		_, err = thisIo.Seek(int64(this.OfsServicePack), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp63 := NewWindowsMinidump_MinidumpString()
		err = tmp63.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.servicePack = tmp63
		_, err = thisIo.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_servicePack = true
	}
	this._f_servicePack = true
	return this.servicePack, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_location_descriptor64">Source</a>
 */
type WindowsMinidump_LocationDescriptor64 struct {
	LenData uint64
	OfsData uint64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent interface{}
	_f_data bool
	data []byte
}
func NewWindowsMinidump_LocationDescriptor64() *WindowsMinidump_LocationDescriptor64 {
	return &WindowsMinidump_LocationDescriptor64{
	}
}

func (this *WindowsMinidump_LocationDescriptor64) Read(io *kaitai.Stream, parent interface{}, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp64, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.LenData = uint64(tmp64)
	tmp65, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.OfsData = uint64(tmp65)
	return err
}
func (this *WindowsMinidump_LocationDescriptor64) Data() (v []byte, err error) {
	if (this._f_data) {
		return this.data, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(this.OfsData), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp66, err := thisIo.ReadBytes(int(this.LenData))
	if err != nil {
		return nil, err
	}
	tmp66 = tmp66
	this.data = tmp66
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_data = true
	this._f_data = true
	return this.data, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_exception">Source</a>
 */
type WindowsMinidump_ExceptionRecord struct {
	Code uint32
	Flags uint32
	InnerException uint64
	Addr uint64
	NumParams uint32
	Reserved uint32
	Params []uint64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_ExceptionStream
}
func NewWindowsMinidump_ExceptionRecord() *WindowsMinidump_ExceptionRecord {
	return &WindowsMinidump_ExceptionRecord{
	}
}

func (this *WindowsMinidump_ExceptionRecord) Read(io *kaitai.Stream, parent *WindowsMinidump_ExceptionStream, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp67, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Code = uint32(tmp67)
	tmp68, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp68)
	tmp69, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.InnerException = uint64(tmp69)
	tmp70, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Addr = uint64(tmp70)
	tmp71, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumParams = uint32(tmp71)
	tmp72, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Reserved = uint32(tmp72)
	for i := 0; i < int(15); i++ {
		_ = i
		tmp73, err := this._io.ReadU8le()
		if err != nil {
			return err
		}
		this.Params = append(this.Params, tmp73)
	}
	return err
}

/**
 * Memory address where exception has occurred
 */

/**
 * Additional parameters passed along with exception raise
 * function (for WinAPI, that is `RaiseException`). Meaning is
 * exception-specific. Given that this type is originally
 * defined by a C structure, it is described there as array of
 * fixed number of elements (`EXCEPTION_MAXIMUM_PARAMETERS` =
 * 15), but in reality only first `num_params` would be used.
 */

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_memory64_list">Source</a>
 */
type WindowsMinidump_Memory64List struct {
	NumMemRanges uint64
	BaseRva uint64
	MemRanges []*WindowsMinidump_MemoryDescriptor64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_Memory64List() *WindowsMinidump_Memory64List {
	return &WindowsMinidump_Memory64List{
	}
}

func (this *WindowsMinidump_Memory64List) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp74, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.NumMemRanges = uint64(tmp74)
	tmp75, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BaseRva = uint64(tmp75)
	for i := 0; i < int(this.NumMemRanges); i++ {
		_ = i
		tmp76 := NewWindowsMinidump_MemoryDescriptor64()
		err = tmp76.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.MemRanges = append(this.MemRanges, tmp76)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_misc_info">Source</a>
 */
type WindowsMinidump_MiscInfo struct {
	LenInfo uint32
	Flags1 uint32
	ProcessId uint32
	ProcessCreateTime uint32
	ProcessUserTime uint32
	ProcessKernelTime uint32
	CpuMaxMhz uint32
	CpuCurMhz uint32
	CpuLimitMhz uint32
	CpuMaxIdleState uint32
	CpuCurIdleState uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_MiscInfo() *WindowsMinidump_MiscInfo {
	return &WindowsMinidump_MiscInfo{
	}
}

func (this *WindowsMinidump_MiscInfo) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp77, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenInfo = uint32(tmp77)
	tmp78, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags1 = uint32(tmp78)
	tmp79, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProcessId = uint32(tmp79)
	tmp80, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProcessCreateTime = uint32(tmp80)
	tmp81, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProcessUserTime = uint32(tmp81)
	tmp82, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProcessKernelTime = uint32(tmp82)
	tmp83, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CpuMaxMhz = uint32(tmp83)
	tmp84, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CpuCurMhz = uint32(tmp84)
	tmp85, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CpuLimitMhz = uint32(tmp85)
	tmp86, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CpuMaxIdleState = uint32(tmp86)
	tmp87, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CpuCurIdleState = uint32(tmp87)
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_directory">Source</a>
 */
type WindowsMinidump_Dir struct {
	StreamType WindowsMinidump_StreamTypes
	LenData uint32
	OfsData uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump
	_raw_data []byte
	_f_data bool
	data interface{}
}
func NewWindowsMinidump_Dir() *WindowsMinidump_Dir {
	return &WindowsMinidump_Dir{
	}
}

func (this *WindowsMinidump_Dir) Read(io *kaitai.Stream, parent *WindowsMinidump, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp88, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StreamType = WindowsMinidump_StreamTypes(tmp88)
	tmp89, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenData = uint32(tmp89)
	tmp90, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsData = uint32(tmp90)
	return err
}
func (this *WindowsMinidump_Dir) Data() (v interface{}, err error) {
	if (this._f_data) {
		return this.data, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsData), io.SeekStart)
	if err != nil {
		return nil, err
	}
	switch (this.StreamType) {
	case WindowsMinidump_StreamTypes__MemoryList:
		tmp91, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp91 = tmp91
		this._raw_data = tmp91
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp92 := NewWindowsMinidump_MemoryList()
		err = tmp92.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp92
	case WindowsMinidump_StreamTypes__MiscInfo:
		tmp93, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp93 = tmp93
		this._raw_data = tmp93
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp94 := NewWindowsMinidump_MiscInfo()
		err = tmp94.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp94
	case WindowsMinidump_StreamTypes__UnloadedModuleList:
		tmp95, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp95 = tmp95
		this._raw_data = tmp95
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp96 := NewWindowsMinidump_UnloadedModuleList()
		err = tmp96.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp96
	case WindowsMinidump_StreamTypes__ModuleList:
		tmp97, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp97 = tmp97
		this._raw_data = tmp97
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp98 := NewWindowsMinidump_ModuleList()
		err = tmp98.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp98
	case WindowsMinidump_StreamTypes__MemoryInfoList:
		tmp99, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp99 = tmp99
		this._raw_data = tmp99
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp100 := NewWindowsMinidump_MemoryInfoList()
		err = tmp100.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp100
	case WindowsMinidump_StreamTypes__Memory64List:
		tmp101, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp101 = tmp101
		this._raw_data = tmp101
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp102 := NewWindowsMinidump_Memory64List()
		err = tmp102.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp102
	case WindowsMinidump_StreamTypes__HandleData:
		tmp103, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp103 = tmp103
		this._raw_data = tmp103
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp104 := NewWindowsMinidump_HandleData()
		err = tmp104.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp104
	case WindowsMinidump_StreamTypes__ThreadList:
		tmp105, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp105 = tmp105
		this._raw_data = tmp105
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp106 := NewWindowsMinidump_ThreadList()
		err = tmp106.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp106
	case WindowsMinidump_StreamTypes__Exception:
		tmp107, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp107 = tmp107
		this._raw_data = tmp107
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp108 := NewWindowsMinidump_ExceptionStream()
		err = tmp108.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp108
	case WindowsMinidump_StreamTypes__SystemInfo:
		tmp109, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp109 = tmp109
		this._raw_data = tmp109
		_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
		tmp110 := NewWindowsMinidump_SystemInfo()
		err = tmp110.Read(_io__raw_data, this, this._root)
		if err != nil {
			return nil, err
		}
		this.data = tmp110
	default:
		tmp111, err := this._io.ReadBytes(int(this.LenData))
		if err != nil {
			return nil, err
		}
		tmp111 = tmp111
		this._raw_data = tmp111
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_data = true
	this._f_data = true
	return this.data, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_location_descriptor">Source</a>
 */

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_thread">Source</a>
 */
type WindowsMinidump_Thread struct {
	ThreadId uint32
	SuspendCount uint32
	PriorityClass uint32
	Priority uint32
	Teb uint64
	Stack *WindowsMinidump_MemoryDescriptor
	ThreadContext *WindowsMinidump_LocationDescriptor
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_ThreadList
}
func NewWindowsMinidump_Thread() *WindowsMinidump_Thread {
	return &WindowsMinidump_Thread{
	}
}

func (this *WindowsMinidump_Thread) Read(io *kaitai.Stream, parent *WindowsMinidump_ThreadList, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp112, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ThreadId = uint32(tmp112)
	tmp113, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SuspendCount = uint32(tmp113)
	tmp114, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.PriorityClass = uint32(tmp114)
	tmp115, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Priority = uint32(tmp115)
	tmp116, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Teb = uint64(tmp116)
	tmp117 := NewWindowsMinidump_MemoryDescriptor()
	err = tmp117.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Stack = tmp117
	tmp118 := NewWindowsMinidump_LocationDescriptor()
	err = tmp118.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ThreadContext = tmp118
	return err
}

/**
 * Thread Environment Block
 */

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/verrsrc/ns-verrsrc-vs_fixedfileinfo">Source</a>
 */
type WindowsMinidump_VsFiledfileinfo struct {
	Signature uint32
	StrucVersion uint32
	FileVersionMs uint32
	FileVersionLs uint32
	ProductVersionMs uint32
	ProductVersionLs uint32
	FileFlagsMask uint32
	FileFlags uint32
	FileOs uint32
	FileType uint32
	FileSubtype uint32
	FileDateMs uint32
	FileDateLs uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Module
}
func NewWindowsMinidump_VsFiledfileinfo() *WindowsMinidump_VsFiledfileinfo {
	return &WindowsMinidump_VsFiledfileinfo{
	}
}

func (this *WindowsMinidump_VsFiledfileinfo) Read(io *kaitai.Stream, parent *WindowsMinidump_Module, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp119, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Signature = uint32(tmp119)
	tmp120, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StrucVersion = uint32(tmp120)
	tmp121, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileVersionMs = uint32(tmp121)
	tmp122, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileVersionLs = uint32(tmp122)
	tmp123, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProductVersionMs = uint32(tmp123)
	tmp124, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ProductVersionLs = uint32(tmp124)
	tmp125, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileFlagsMask = uint32(tmp125)
	tmp126, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileFlags = uint32(tmp126)
	tmp127, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileOs = uint32(tmp127)
	tmp128, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileType = uint32(tmp128)
	tmp129, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileSubtype = uint32(tmp129)
	tmp130, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileDateMs = uint32(tmp130)
	tmp131, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FileDateLs = uint32(tmp131)
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_unloaded_module">Source</a>
 */
type WindowsMinidump_UnloadedModule struct {
	BaseOfImage uint64
	SizeOfImage uint32
	CheckSum uint32
	TimeDateStamp uint32
	ModuleNameRva uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_UnloadedModuleList
	_f_lenUnloadedModuleName bool
	lenUnloadedModuleName uint32
	_f_unloadedModuleName bool
	unloadedModuleName string
}
func NewWindowsMinidump_UnloadedModule() *WindowsMinidump_UnloadedModule {
	return &WindowsMinidump_UnloadedModule{
	}
}

func (this *WindowsMinidump_UnloadedModule) Read(io *kaitai.Stream, parent *WindowsMinidump_UnloadedModuleList, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp132, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BaseOfImage = uint64(tmp132)
	tmp133, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SizeOfImage = uint32(tmp133)
	tmp134, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CheckSum = uint32(tmp134)
	tmp135, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TimeDateStamp = uint32(tmp135)
	tmp136, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ModuleNameRva = uint32(tmp136)
	return err
}
func (this *WindowsMinidump_UnloadedModule) LenUnloadedModuleName() (v uint32, err error) {
	if (this._f_lenUnloadedModuleName) {
		return this.lenUnloadedModuleName, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(this.ModuleNameRva), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp137, err := thisIo.ReadU4le()
	if err != nil {
		return 0, err
	}
	this.lenUnloadedModuleName = tmp137
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	this._f_lenUnloadedModuleName = true
	this._f_lenUnloadedModuleName = true
	return this.lenUnloadedModuleName, nil
}
func (this *WindowsMinidump_UnloadedModule) UnloadedModuleName() (v string, err error) {
	if (this._f_unloadedModuleName) {
		return this.unloadedModuleName, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64((this.ModuleNameRva + 4)), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp138, err := this.LenUnloadedModuleName()
	if err != nil {
		return "", err
	}
	tmp139, err := thisIo.ReadBytes(int(tmp138))
	if err != nil {
		return "", err
	}
	tmp139 = tmp139
	tmp140, err := kaitai.BytesToStr(tmp139, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return "", err
	}
	this.unloadedModuleName = tmp140
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	this._f_unloadedModuleName = true
	this._f_unloadedModuleName = true
	return this.unloadedModuleName, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_memory64_list">Source</a>
 */
type WindowsMinidump_MemoryList struct {
	NumMemRanges uint32
	MemRanges []*WindowsMinidump_MemoryDescriptor
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_MemoryList() *WindowsMinidump_MemoryList {
	return &WindowsMinidump_MemoryList{
	}
}

func (this *WindowsMinidump_MemoryList) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp141, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumMemRanges = uint32(tmp141)
	for i := 0; i < int(this.NumMemRanges); i++ {
		_ = i
		tmp142 := NewWindowsMinidump_MemoryDescriptor()
		err = tmp142.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.MemRanges = append(this.MemRanges, tmp142)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_handle_data_stream">Source</a>
 */
type WindowsMinidump_HandleData struct {
	LenOfHeader uint32
	LenHandles uint32
	NumHandles uint32
	Reserved uint32
	Handles []*WindowsMinidump_HandleDescriptor
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
	_raw_Handles [][]byte
}
func NewWindowsMinidump_HandleData() *WindowsMinidump_HandleData {
	return &WindowsMinidump_HandleData{
	}
}

func (this *WindowsMinidump_HandleData) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp143, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenOfHeader = uint32(tmp143)
	tmp144, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenHandles = uint32(tmp144)
	tmp145, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumHandles = uint32(tmp145)
	tmp146, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Reserved = uint32(tmp146)
	for i := 0; i < int(this.NumHandles); i++ {
		_ = i
		tmp147, err := this._io.ReadBytes(int(this.LenHandles))
		if err != nil {
			return err
		}
		tmp147 = tmp147
		this._raw_Handles = append(this._raw_Handles, tmp147)
		_io__raw_Handles := kaitai.NewStream(bytes.NewReader(this._raw_Handles[i]))
		tmp148 := NewWindowsMinidump_HandleDescriptor()
		err = tmp148.Read(_io__raw_Handles, this, this._root)
		if err != nil {
			return err
		}
		this.Handles = append(this.Handles, tmp148)
	}
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_location_descriptor64">Source</a>
 */
type WindowsMinidump_MemoryDescriptor64 struct {
	StartOfMemoryRange uint64
	LenData uint64
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Memory64List
	_f_data bool
	data []byte
}
func NewWindowsMinidump_MemoryDescriptor64() *WindowsMinidump_MemoryDescriptor64 {
	return &WindowsMinidump_MemoryDescriptor64{
	}
}

func (this *WindowsMinidump_MemoryDescriptor64) Read(io *kaitai.Stream, parent *WindowsMinidump_Memory64List, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp149, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.StartOfMemoryRange = uint64(tmp149)
	tmp150, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.LenData = uint64(tmp150)
	return err
}
func (this *WindowsMinidump_MemoryDescriptor64) Data() (v []byte, err error) {
	if (this._f_data) {
		return this.data, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(this._parent.BaseRva), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp151, err := thisIo.ReadBytes(int(this.LenData))
	if err != nil {
		return nil, err
	}
	tmp151 = tmp151
	this.data = tmp151
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_data = true
	this._f_data = true
	return this.data, nil
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_memory_descriptor">Source</a>
 */
type WindowsMinidump_MemoryDescriptor struct {
	AddrMemoryRange uint64
	Memory *WindowsMinidump_LocationDescriptor
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent interface{}
}
func NewWindowsMinidump_MemoryDescriptor() *WindowsMinidump_MemoryDescriptor {
	return &WindowsMinidump_MemoryDescriptor{
	}
}

func (this *WindowsMinidump_MemoryDescriptor) Read(io *kaitai.Stream, parent interface{}, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp152, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.AddrMemoryRange = uint64(tmp152)
	tmp153 := NewWindowsMinidump_LocationDescriptor()
	err = tmp153.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Memory = tmp153
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_exception_stream">Source</a>
 */
type WindowsMinidump_ExceptionStream struct {
	ThreadId uint32
	Reserved uint32
	ExceptionRec *WindowsMinidump_ExceptionRecord
	ThreadContext *WindowsMinidump_LocationDescriptor
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_Dir
}
func NewWindowsMinidump_ExceptionStream() *WindowsMinidump_ExceptionStream {
	return &WindowsMinidump_ExceptionStream{
	}
}

func (this *WindowsMinidump_ExceptionStream) Read(io *kaitai.Stream, parent *WindowsMinidump_Dir, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp154, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ThreadId = uint32(tmp154)
	tmp155, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Reserved = uint32(tmp155)
	tmp156 := NewWindowsMinidump_ExceptionRecord()
	err = tmp156.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ExceptionRec = tmp156
	tmp157 := NewWindowsMinidump_LocationDescriptor()
	err = tmp157.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ThreadContext = tmp157
	return err
}

/**
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_handle_descriptor">Source</a>
 */
type WindowsMinidump_HandleDescriptor struct {
	Handle uint64
	TypeNameRva uint32
	ObjectNameRva uint32
	Attributes uint32
	GrantedAccess uint32
	CountHandle uint32
	CountPointer uint32
	ObjectInfoRva uint32
	_io *kaitai.Stream
	_root *WindowsMinidump
	_parent *WindowsMinidump_HandleData
	_f_typeNameDescriptor bool
	typeNameDescriptor *WindowsMinidump_MinidumpString
	_f_objectNameDescriptor bool
	objectNameDescriptor *WindowsMinidump_MinidumpString
}
func NewWindowsMinidump_HandleDescriptor() *WindowsMinidump_HandleDescriptor {
	return &WindowsMinidump_HandleDescriptor{
	}
}

func (this *WindowsMinidump_HandleDescriptor) Read(io *kaitai.Stream, parent *WindowsMinidump_HandleData, root *WindowsMinidump) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp158, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Handle = uint64(tmp158)
	tmp159, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TypeNameRva = uint32(tmp159)
	tmp160, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ObjectNameRva = uint32(tmp160)
	tmp161, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Attributes = uint32(tmp161)
	tmp162, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.GrantedAccess = uint32(tmp162)
	tmp163, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CountHandle = uint32(tmp163)
	tmp164, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CountPointer = uint32(tmp164)
	tmp165, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ObjectInfoRva = uint32(tmp165)
	return err
}
func (this *WindowsMinidump_HandleDescriptor) TypeNameDescriptor() (v *WindowsMinidump_MinidumpString, err error) {
	if (this._f_typeNameDescriptor) {
		return this.typeNameDescriptor, nil
	}
	if (this.TypeNameRva > 0) {
		thisIo := this._root._io
		_pos, err := thisIo.Pos()
		if err != nil {
			return nil, err
		}
		_, err = thisIo.Seek(int64(this.TypeNameRva), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp166 := NewWindowsMinidump_MinidumpString()
		err = tmp166.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.typeNameDescriptor = tmp166
		_, err = thisIo.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_typeNameDescriptor = true
	}
	this._f_typeNameDescriptor = true
	return this.typeNameDescriptor, nil
}
func (this *WindowsMinidump_HandleDescriptor) ObjectNameDescriptor() (v *WindowsMinidump_MinidumpString, err error) {
	if (this._f_objectNameDescriptor) {
		return this.objectNameDescriptor, nil
	}
	if (this.ObjectNameRva > 0) {
		thisIo := this._root._io
		_pos, err := thisIo.Pos()
		if err != nil {
			return nil, err
		}
		_, err = thisIo.Seek(int64(this.ObjectNameRva), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp167 := NewWindowsMinidump_MinidumpString()
		err = tmp167.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.objectNameDescriptor = tmp167
		_, err = thisIo.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_objectNameDescriptor = true
	}
	this._f_objectNameDescriptor = true
	return this.objectNameDescriptor, nil
}
